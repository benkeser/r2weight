% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/optWeight.R
\name{optWeight}
\alias{optWeight}
\title{optWeight}
\usage{
optWeight(Y, X, SL.library, family = gaussian(), CV.SuperLearner.V = 10,
  seed = 12345, whichAlgorithm = "SuperLearner",
  return.CV.SuperLearner = FALSE, return.IC = TRUE, parallel = FALSE,
  n.cores = detectCores(), ...)
}
\arguments{
\item{Y}{A \code{data.frame} of outcomes with each column representing a different outcome}

\item{X}{A \code{data.frame} that will be used to predict each outcome.}

\item{SL.library}{A \code{vector} or \code{list} of the Super Learner library to be used for the
prediction. See \code{?SuperLearner} for more details. For now the same \code{SL.library} is used
for prediction of each outcome.}

\item{family}{An object of class \code{family} equal to either \code{gaussian()} for continuous
outcomes or \code{binomial()} for binary outcomes.}

\item{CV.SuperLearner.V}{The number of CV folds for the calls to \code{CV.SuperLearner}. For now, the inner
calls to \code{CV.SuperLearner} always use V=10.}

\item{seed}{The seed to set before each internal call to \code{CV.SuperLearner}}

\item{whichAlgorithm}{What algorithm to compute optimal predictions and R^2 values for.}

\item{return.CV.SuperLearner}{A \code{boolean} indicating whether to return the fitted CV.SuperLearner
objects.}

\item{parallel}{A \code{boolean} indicating whether to run the CV.SuperLearner calls
in parallel using \code{mclapply}. Be sure to set options()$mc.cores to}

\item{n.cores}{A \code{numeric} indicating how many cores to use if \code{parallel = TRUE}. 
By default will use \code{detectCores()}.}

\item{...}{Other arguments}
}
\value{
TO DO: Add return documentation.
}
\description{
Function that computes the optimal combination of multiple outcomes and a predictor of
the optimal combination using Super Learning.
}
\examples{
# Example 1 -- simple fit
X <- data.frame(x1=runif(n=100,0,5), x2=runif(n=100,0,5))
Y1 <- rnorm(100, X$x1 + X$x2, 1)
Y2 <- rnorm(100, X$x1 + X$x2, 3)
Y <- data.frame(Y1 = Y1, Y2 = Y2)
system.time(
 fit <- optWeight(Y = Y, X = X, SL.library = c("SL.glm","SL.mean","SL.randomForest"))
)
# Example 2 -- simple fit with parallelization
system.time(
   fit <- optWeight(Y = Y, X = X, SL.library = c("SL.glm","SL.mean","SL.randomForest"), parallel = TRUE, n.cores = 3)
)


}

